// Generated by CoffeeScript 1.3.3
(function() {

  define(['underscore', 'backbone', 'marionette', 'bookish/controller', 'bookish/models', 'epub/models', 'bookish/auth', 'bookish/views', 'hbs!gh-book/sign-in-out', 'hbs!gh-book/fork-book-item'], function(_, Backbone, Marionette, Controller, AtcModels, EpubModels, Auth, Views, SIGN_IN_OUT, FORK_BOOK_ITEM) {
    return Views.AuthView = Views.AuthView.extend({
      template: SIGN_IN_OUT,
      events: _.extend(Views.AuthView.prototype.events, {
        'click #save-settings': 'saveSettings',
        'click #fork-book': 'forkBook',
        'click .other-books': 'otherBooks'
      }),
      templateHelpers: function() {
        return {
          canFork: this.model.get('id') !== this.model.get('repoUser') || !this.model.get('password')
        };
      },
      signIn: function() {
        return this.model.set({
          id: this.$el.find('#github-id').val(),
          password: this.$el.find('#github-password').val()
        });
      },
      signOut: function() {
        return this.model.signOut();
      },
      forkBook: function() {
        var $fork, forkHandler,
          _this = this;
        if (!this.model.get('id')) {
          return alert('Please log in to fork or just go to the github page and fork the book!');
        }
        $fork = this.$el.find('#fork-book-modal');
        forkHandler = function(org) {
          return function() {
            return Auth.getRepo().fork(function(err, resp) {
              $fork.modal('hide');
              if (err) {
                throw "Problem forking: " + err;
              }
              setTimeout(function() {
                return Auth.set('repoUser', org || Auth.get('id'));
              }, 10000);
              return alert('Thanks for copying!\nThe current repository (in settings) will be updated to point to your copy of the book. \nThe next time you click Save the changes will be saved to your copied book.\nIf not, refresh the page and change the Repo User in Settings.');
            });
          };
        };
        return Auth.getUser().orgs().done(function(orgs) {
          var $item, $list;
          $list = $fork.find('.modal-body').empty();
          $item = jQuery(FORK_BOOK_ITEM({
            login: Auth.get('id')
          }));
          $item.find('button').on('click', forkHandler(null));
          $list.append($item);
          _.each(orgs, function(org) {
            $item = jQuery(FORK_BOOK_ITEM({
              login: "" + org.login + " (Organization)"
            }));
            $item.addClass('disabled');
            return $list.append($item);
          });
          return $fork.modal('show');
        });
      },
      otherBooks: function(evt) {
        var $config, $save, rootPath;
        $config = this.$(evt.target);
        rootPath = $config.data('rootPath');
        if (rootPath && rootPath[rootPath.length - 1] !== '/') {
          rootPath += '/';
        }
        $save = this.$el.find('#save-settings-modal');
        $save.modal('hide');
        return this.model.set({
          repoUser: $config.data('repoUser'),
          repoName: $config.data('repoName'),
          branch: $config.data('branch'),
          rootPath: rootPath
        });
      },
      saveSettings: function() {
        var rootPath;
        rootPath = this.$el.find('#github-rootPath').val();
        if (rootPath && rootPath[rootPath.length - 1] !== '/') {
          rootPath += '/';
        }
        return this.model.set({
          repoUser: this.$el.find('#github-repoUser').val(),
          repoName: this.$el.find('#github-repoName').val(),
          branch: this.$el.find('#github-branch').val(),
          rootPath: rootPath
        });
      }
    });
  });

}).call(this);
